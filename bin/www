#!/usr/bin/env node

global.fetch = require('node-fetch');

const app = require("../app"),
  debug = require("debug")("wejo:server"),
  http = require("http");

const createBackendFramework = require("../backend-framework");
const authBackendMiddleware = require("../backend-framework/middlewares/auth");
const requestBackendMiddleware = require("../backend-framework/middlewares/request");
const responseBackendMiddleware = require("../backend-framework/middlewares/response");

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);
const io = require("socket.io")(server);

const processor = createBackendFramework([
  authBackendMiddleware,
  requestBackendMiddleware,
  responseBackendMiddleware
]);

io.on("connection", socket => {
  socket.on("action", processor(socket));
});

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
